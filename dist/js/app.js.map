{"version":3,"sources":["app.js"],"names":["nav","document","querySelector","navListParrent","navList","navListItems","querySelectorAll","navToggle","firstSection","getOffsetTop","elem","offsetTop","isNaN","offsetParent","navShow","b","setAttribute","i","length","classList","add","console","log","remove","headerShow","window","addEventListener","e","offsetHeight","aboutSection","getElementById","id","size","width","offsetWidth","height","aboutSketch","p","bgImg","preload","loadImage","setup","createCanvas","loadPixels","noLoop","background","image","stroke","x","line","noiseVal","noise","noiseScale","windowResized","resizeCanvas","showAboutSketch","p5","sectionWork","workArticles","skillSketch","pos","y","skillSection","circles","circleMouse","objSize","brain","BrainImg","screen","innerWidth","objAmount","speedX","random","rightWall","speedY","Circle","numbers","Text","strokeWeight","update","draw","number","overlapping","other","intersectCircle","arguments","undefined","_classCallCheck","this","text","_createClass","key","value","fill","fillColor","textSize","intersectWall","strokeColor","noFill","ellipse","color","d","img","targetY","showSkillSketch","$","ready","workWrapper","group","groupLength","index","endIndex","append","num","updatePaginatorNumbers","addClass","animate","left","click"],"mappings":"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","file":"app.js","sourcesContent":["const nav = document.querySelector('header#top nav.items');\r\nconst navListParrent = document.querySelector('header#top nav ul');\r\nconst navList = document.querySelector('header#top nav ul li');\r\nconst navListItems = document.querySelectorAll('header#top nav ul li a');\r\nconst navToggle = document.querySelector('.nav-toggle');\r\nconst firstSection = document.querySelector('body section');\r\n\r\nlet headerShow = false;\r\n\r\nnav.classList.add('nav-nobg');\r\n\r\nnavToggle.addEventListener('click', () => {\r\n    navShow(headerShow);\r\n    headerShow = !headerShow;\r\n});\r\n\r\nwindow.addEventListener('scroll', e => {\r\n\r\n    if (window.pageYOffset > getOffsetTop(firstSection) - (nav.offsetHeight / 2) &&\r\n        window.pageYOffset < getOffsetTop(firstSection) + firstSection.offsetHeight - (nav.offsetHeight / 2)) {\r\n\r\n        nav.classList.remove('nav-bg');\r\n    }else{\r\n        nav.classList.add('nav-bg');\r\n    }\r\n\r\n    // console.log(firstSection);\r\n    \r\n});\r\n\r\nfunction getOffsetTop(elem) {\r\n    var offsetTop = 0;\r\n    do {\r\n        if (!isNaN(elem.offsetTop)) {\r\n            offsetTop += elem.offsetTop;\r\n        }\r\n    } while (elem = elem.offsetParent);\r\n    return offsetTop;\r\n}\r\n\r\nfunction navShow(b) {\r\n    if (!b) {\r\n        navListParrent.setAttribute('style', `width: 200px;`);\r\n        for (let i = 0; i < navListItems.length; i++ ){\r\n            navListItems[i].setAttribute('style', 'right: 0;');\r\n        }\r\n        // overlay.setAttribute('style', 'display:block; opacity:0.5; z-index:100;');\r\n\r\n        navToggle.classList.add('is-open');\r\n    } else {\r\n        navListParrent.setAttribute('style', `width: 0px;`);\r\n        for (let i = 0; i < navListItems.length; i++) {\r\n            navListItems[i].setAttribute('style', 'right: -200px;');\r\n        }\r\n        console.log('umbau');\r\n        // nav.setAttribute('style', `transform:translateX(${navHideX}px);`)\r\n        // overlay.setAttribute('style', 'display:none; opacity:0; z-index:-100;');\r\n\r\n        navToggle.classList.remove('is-open');\r\n    }\r\n\r\n\r\n\r\n\r\n}\nlet aboutSection = {\r\n    e: document.getElementById('about'),\r\n    id: 'about',\r\n    size: {\r\n        width: document.getElementById('about').offsetWidth,\r\n        height: document.getElementById('about').offsetHeight\r\n    }\r\n}\r\n\r\nlet aboutSketch = p => {\r\n    let noiseScale = 0.02;\r\n    let fps;\r\n    let bgImg;\r\n\r\n    p.preload = () => {\r\n        bgImg = p.loadImage('/img/particles.jpg');\r\n    }\r\n\r\n    p.setup = () => {\r\n        p.createCanvas(aboutSection.size.width, aboutSection.size.height);\r\n        bgImg.loadPixels();\r\n        p.noLoop();\r\n        \r\n    }\r\n\r\n    p.draw = () => {\r\n        p.background(13, 18, 24);\r\n\r\n        p.image(bgImg, 0, 0, aboutSection.size.width, aboutSection.size.height);\r\n\r\n\r\n        p.stroke(255);\r\n\r\n        for (let x = 0; x < p.width; x++) {\r\n            let noiseVal = p.noise(x * noiseScale, noiseScale * 500);\r\n            p.line(x,  (p.height - 50) + noiseVal * 80, x, p.height);\r\n        }\r\n\r\n    }\r\n\r\n    p.windowResized = () => {\r\n        aboutSection.size.width = aboutSection.e.offsetWidth;\r\n        aboutSection.size.height = aboutSection.e.offsetHeight;\r\n\r\n        p.resizeCanvas(aboutSection.size.width, aboutSection.size.height);\r\n        \r\n    }\r\n}\r\n\r\nlet showAboutSketch = new p5(aboutSketch, aboutSection.id);\nconst sectionWork = document.querySelector('section#work');\r\nconst workArticles = document.querySelectorAll('section#work article');\r\n\r\n\r\n// for (let i = 0; i < workArticles.length; i++) {\r\n//     const article = workArticles[i];\r\n    \r\n//     const title = document.querySelector(`article.${article.classList}`);\r\n    \r\n\r\n//     article.addEventListener('mouseover', () => {\r\n//         title.classList.add('article-hover');\r\n//     });\r\n\r\n//     article.addEventListener('mouseleave', () => {\r\n//         title.classList.remove('article-hover');\r\n//     });\r\n\r\n// }\r\n\n\r\nlet skillSection = {\r\n    e: document.getElementById('skill'),\r\n    id: 'skill',\r\n    size:{\r\n        width: document.getElementById('skill').offsetWidth,\r\n        height: document.getElementById('skill').offsetHeight\r\n    }\r\n}\r\n\r\nlet skillSketch = function(p){\r\n\r\n    let brain;\r\n\r\n    let rightWall = {\r\n        pos: {\r\n            x: skillSection.e.offsetWidth / 2,\r\n            y: 0\r\n        },\r\n        size: {\r\n            width: skillSection.e.offsetWidth / 2\r\n        }\r\n\r\n    };\r\n\r\n    let circles = [];\r\n    let numbers = [];\r\n\r\n    let objAmount;\r\n    let objSize;\r\n\r\n    let circleMouse;\r\n\r\n    p.setup = () => {\r\n\r\n        p.createCanvas(skillSection.e.offsetWidth, skillSection.e.offsetHeight);\r\n\r\n        p.background(255);\r\n\r\n        circleMouse = new Circle(0, 0, 50);\r\n        \r\n        if (window.innerWidth <= 480){\r\n            brain = new BrainImg(p.loadImage('/img/white-brain.jpg'), 0, 0, 200, 170);\r\n        }else{\r\n            brain = new BrainImg(p.loadImage('/img/white-brain.jpg'),0, 0, 500, 430);\r\n        }\r\n\r\n        if (screen.width <= 480) {\r\n            objAmount = 4;\r\n            objSize = 30;\r\n        }else{\r\n            objAmount = 4;\r\n            objSize = 50;\r\n        }\r\n\r\n        // Circles\r\n        for (let i = 0; i < objAmount; i++){\r\n\r\n            let x = p.random(rightWall.pos.x, (rightWall.pos.x * 2) - 50);\r\n            let y = p.random(0, skillSection.e.offsetHeight);\r\n\r\n            let speedX = p.random(-1.5, 1.5);\r\n            let speedY = p.random(-1.5, 1.5);\r\n\r\n            if (speedX == 0){\r\n                speedX = 1;\r\n            }\r\n\r\n            if (speedY == 0){\r\n                speedY = 1;\r\n            }\r\n\r\n            circles[i] = new Circle(x, y, objSize, speedX, speedY);\r\n        }\r\n\r\n        // Numbers\r\n        for (let i = 0; i < objAmount; i++){\r\n            let x = p.random(0, rightWall.pos.x - 50);\r\n            let y = p.random(0, skillSection.e.offsetHeight);\r\n\r\n            let speedX = p.random(-1.5, 1.5);\r\n            let speedY = p.random(-1.5, 1.5);\r\n\r\n            if (speedX == 0) {\r\n                speedX = 1;\r\n            }\r\n\r\n            if (speedY == 0) {\r\n                speedY = 1;\r\n            }\r\n\r\n            numbers[i] = new Text(i, x, y, objSize, speedX, speedY);\r\n        }\r\n\r\n        p.frameRate(60);\r\n    }\r\n\r\n    p.draw = () => {\r\n\r\n        p.background(255);\r\n\r\n        brain.update();\r\n        brain.draw();\r\n\r\n        \r\n\r\n        p.strokeWeight(4);\r\n        p.stroke(156, 205, 207);\r\n\r\n        // circleMouse.draw();\r\n\r\n        // Numbers\r\n        for (let i = 0; i < numbers.length; i++) {\r\n            const number = numbers[i];\r\n\r\n            number.update();\r\n            number.draw();\r\n\r\n            // p.fill(0, 255,0);\r\n            // p.ellipse(number.x, number.y, 5, 5);\r\n        }\r\n\r\n        // Circles\r\n        for (let i = 0; i < circles.length; i++){\r\n\r\n            let overlapping = false;\r\n\r\n            circles[i].noFill();\r\n\r\n            circles[i].update();\r\n            circles[i].draw();\r\n\r\n            for (let other = 0; other < circles.length; other++){\r\n                if (i != other && circles[i].intersectCircle(circles[other])){\r\n                    overlapping = true;\r\n                }\r\n                \r\n            }\r\n\r\n            if (overlapping) {\r\n                circles[i].stroke([0, 98, 255]);\r\n\r\n            } else {\r\n                circles[i].stroke([156, 205, 207]);\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    p.windowResized = () => {\r\n\r\n        if (window.innerWidth <= 480) {\r\n            objAmount = 5;\r\n        } else {\r\n            objAmount = 10;\r\n        }\r\n        \r\n\r\n        rightWall = {\r\n            pos: {\r\n                x: skillSection.e.offsetWidth / 2,\r\n                y: 0\r\n            },\r\n            size: {\r\n                width: skillSection.e.offsetWidth / 2\r\n            }\r\n\r\n        };\r\n\r\n        if (window.innerWidth <= 480) {\r\n            brain.width = 200;\r\n            brain.height = 170;\r\n        } else {\r\n            brain.width = 500;\r\n            brain.height = 430;\r\n        }\r\n\r\n        if (window.innerWidth >= 1200){\r\n            brain.width = 700;\r\n            brain.height = 630;\r\n        }\r\n\r\n        p.resizeCanvas(skillSection.e.offsetWidth, skillSection.e.offsetHeight);\r\n    }\r\n\r\n    class Text {\r\n        constructor(text, x, y, size, speedX = 2, speedY = 2) {\r\n            this.text = text;\r\n\r\n            this.x = x + 50;\r\n            this.y = y + 50;\r\n\r\n            this.size = size;\r\n\r\n            this.speedX = speedX;\r\n            this.speedY = speedY;\r\n\r\n            this.fillColor = [156, 205, 207];\r\n        }\r\n\r\n        draw() {\r\n            p.noStroke();\r\n\r\n            p.fill(this.fillColor);\r\n            p.textSize(this.size);\r\n            p.text(this.text, this.x, this.y);\r\n\r\n        }\r\n\r\n        update() {\r\n            this.x += this.speedX;\r\n            this.y += this.speedY;\r\n\r\n            this.intersectWall();\r\n        }\r\n\r\n        intersectWall() {\r\n            if (this.x >= rightWall.pos.x - (this.size / 2)) {\r\n                this.x = rightWall.pos.x - (this.size / 2);\r\n                this.speedX *= -1;\r\n            }\r\n\r\n            if (this.x <= 0) {\r\n                this.x = 0;\r\n                this.speedX *= -1;\r\n\r\n                // this.fillColor = [255, 0, 0];\r\n            }\r\n\r\n            if (this.y >= p.height) {\r\n                this.y = p.height;\r\n                this.speedY *=  -1;\r\n            }\r\n\r\n            if (this.y - this.size <= 0) {\r\n                this.y = this.size;\r\n                this.speedY *= -1;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    class Circle{\r\n        constructor(x, y, size, speedX=2, speedY=2){\r\n            this.x = x + 50;\r\n            this.y = y + 50;\r\n            \r\n            this.size = size;\r\n            \r\n            this.speedX = speedX;\r\n            this.speedY = speedY;\r\n\r\n            this.fillColor = 0;\r\n            this.strokeColor = 0;\r\n        }\r\n\r\n        draw(){\r\n            p.stroke(this.strokeColor);\r\n            if (this.noFill){\r\n                p.noFill();\r\n            }else{\r\n                p.fill(this.fillColor);\r\n            }\r\n\r\n            p.ellipse(this.x, this.y, this.size, this.size);\r\n            \r\n        }\r\n\r\n        update(){\r\n            this.x += this.speedX;\r\n            this.y += this.speedY;\r\n\r\n            this.intersectWall();\r\n        }\r\n\r\n        noFill(b){\r\n            return b;\r\n        }\r\n\r\n        fill(color){\r\n            this.fillColor = color;\r\n        }\r\n\r\n        stroke(color){\r\n            this.strokeColor = color;\r\n        }\r\n\r\n        intersectCircle(other){\r\n            let d = p.dist(this.x, this.y, other.x, other.y);\r\n            let fd = (this.size / 2) + (other.size /2);\r\n\r\n            return d < fd; \r\n        }\r\n\r\n        intersectWall(){\r\n            if (this.x >= p.width - (this.size / 2)) {\r\n                this.x = p.width - (this.size / 2);\r\n                this.speedX = this.speedX * -1;\r\n            }\r\n\r\n            if (this.x <= rightWall.pos.x + (this.size / 2)) {\r\n                this.x = rightWall.pos.x + this.size / 2;\r\n                this.speedX = this.speedX * -1;\r\n            }\r\n\r\n            if (this.y >= p.height - (this.size / 2)) {\r\n                this.y = p.height - (this.size / 2);\r\n                this.speedY = this.speedY * -1;\r\n            }\r\n\r\n            if (this.y <= this.size / 2) {\r\n                this.y = this.size / 2;\r\n                this.speedY = this.speedY * -1;\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    class BrainImg {\r\n        constructor(img, x, y, width, height) {\r\n            this.img = img;\r\n\r\n            this.x = x;\r\n            this.y = y;\r\n\r\n            this.width = width;\r\n            this.height = height;\r\n        }\r\n\r\n        draw() {\r\n            p.image(this.img, this.x, this.y, this.width, this.height);\r\n        }\r\n\r\n        update() {\r\n            this.x = (p.width / 2) - (this.width / 2);\r\n            this.y = (p.height / 2) - (this.height / 2);\r\n        }\r\n\r\n        followY(targetY, speedY) {\r\n            if (this.y < targetY) {\r\n                this.y += speedY;\r\n            }\r\n\r\n            if (this.y > targetY) {\r\n                this.y -= speedY;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlet showSkillSketch = new p5(skillSketch, skillSection.id);\n\r\n\r\n$(document).ready(() => {\r\n\r\n    const workWrapper = $('.work-wrapper');\r\n    const group = $('.work-group');\r\n\r\n    let groupLength = workWrapper.children().length;\r\n    let visible = 1;\r\n    let index = 0;\r\n    let endIndex = (group.length / visible) - 1;\r\n\r\n    \r\n\r\n    for (let i = 0; i < groupLength; i++) {\r\n        $('.work-paginator ul').append(`\r\n        <li><a href='#'>${i + 1}</a></li>`);\r\n    }\r\n\r\n    updatePaginatorNumbers(1);\r\n\r\n    $('.work-paginator .icon-arrow-left').click(() => {\r\n        if (index > 0) {\r\n            index--;\r\n            group.animate({ 'left': `+=${group.width()}` });\r\n        }else{\r\n            index = endIndex;\r\n            group.animate({'left': `-${group.width() * (groupLength - 1)}`});\r\n        }\r\n\r\n        updatePaginatorNumbers(index + 1);\r\n    });\r\n\r\n    $('.work-paginator .icon-arrow-right').click(() => {\r\n        if (index < endIndex) {\r\n            index++;\r\n            group.animate({ 'left': `-=${group.width()}` });\r\n        }else {\r\n            index = 0;\r\n            group.animate({ 'left': '0px' });\r\n        }\r\n\r\n        updatePaginatorNumbers(index + 1);\r\n    });\r\n    \r\n    function updatePaginatorNumbers(i) {\r\n        const num = $(`.work-paginator ul li:nth-child(${i})`);\r\n\r\n        $('.work-paginator ul li').removeClass('selected');\r\n\r\n        num.addClass('selected');\r\n    }\r\n});"]}