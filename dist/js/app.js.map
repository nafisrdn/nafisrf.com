{"version":3,"sources":["app.js"],"names":["nav","document","querySelector","navListParrent","navListItems","querySelectorAll","navToggle","firstSection","getOffsetTop","elem","offsetTop","isNaN","offsetParent","b","setAttribute","i","length","classList","add","console","log","remove","navShow","headerShow","window","addEventListener","e","offsetHeight","NoiseSketch","arguments","undefined","section","this","img","clsp","sketch","p","bgImg","preload","loadImage","setup","createCanvas","width","outerHeight","noLoop","loadPixels","draw","stroke","background","noiseVal","line","height","BubbleAndNum","x","noise","noiseScale","resizeCanvas","val","pos","y","bgimg","rightWall","objAmount","objSize","size","outerWidth","circles","circleMouse","Circle","innerWidth","BrainImg","random","screen","speedX","speedY","numbers","Text","frameRate","number","update","strokeWeight","noFill","overlapping","other","intersectCircle","windowResized","text","_classCallCheck","noStroke","fill","textSize","fillColor","_createClass","key","value","intersectWall","strokeColor","ellipse","color","d","dist","fd","image","targetY","aboutSection","$","skillSection","showAboutSketch","p5","test","workSection","workWrapper","group","workPaginator","skillSectionSketch2","groupLength","children","active","append","firstSectionWork","postContentSection","removeClass","num","addClass","css","updatePaginatorNumbers","click","index","leftWork","left","previousWork","endWork","endIndex","setTimeout","nextWork","showFirstSketch","$target","not","event","location","pathname","replace","hostname","target","hash","slice","preventDefault","animate","scrollTop","offset","top","focus","is","attr"],"mappings":"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","file":"app.js","sourcesContent":["const nav = document.querySelector('header#top nav.items');\r\nconst navListParrent = document.querySelector('header#top nav ul');\r\nconst navList = document.querySelector('header#top nav ul li');\r\nconst navListItems = document.querySelectorAll('header#top nav ul li a');\r\nconst navToggle = document.querySelector('.nav-toggle');\r\nconst firstSection = document.querySelector('body section');\r\n\r\nlet headerShow = false;\r\n\r\nnav.classList.add('nav-nobg');\r\n\r\nnavToggle.addEventListener('click', () => {\r\n    navShow(headerShow);\r\n    headerShow = !headerShow;\r\n});\r\n\r\nwindow.addEventListener('scroll', e => {\r\n\r\n    if (window.pageYOffset > getOffsetTop(firstSection) - (nav.offsetHeight / 2) &&\r\n        window.pageYOffset < getOffsetTop(firstSection) + firstSection.offsetHeight - (nav.offsetHeight / 2)) {\r\n\r\n        nav.classList.remove('nav-bg');\r\n    }else{\r\n        nav.classList.add('nav-bg');\r\n    }\r\n\r\n    // console.log(firstSection);\r\n    \r\n});\r\n\r\nfunction getOffsetTop(elem) {\r\n    var offsetTop = 0;\r\n    do {\r\n        if (!isNaN(elem.offsetTop)) {\r\n            offsetTop += elem.offsetTop;\r\n        }\r\n    } while (elem = elem.offsetParent);\r\n    return offsetTop;\r\n}\r\n\r\nfunction navShow(b) {\r\n    if (!b) {\r\n        navListParrent.setAttribute('style', `width: 200px;`);\r\n        for (let i = 0; i < navListItems.length; i++ ){\r\n            navListItems[i].setAttribute('style', 'right: 0;');\r\n        }\r\n        // overlay.setAttribute('style', 'display:block; opacity:0.5; z-index:100;');\r\n\r\n        navToggle.classList.add('is-open');\r\n    } else {\r\n        navListParrent.setAttribute('style', `width: 0px;`);\r\n        for (let i = 0; i < navListItems.length; i++) {\r\n            navListItems[i].setAttribute('style', 'right: -200px;');\r\n        }\r\n        console.log('umbau');\r\n        // nav.setAttribute('style', `transform:translateX(${navHideX}px);`)\r\n        // overlay.setAttribute('style', 'display:none; opacity:0; z-index:-100;');\r\n\r\n        navToggle.classList.remove('is-open');\r\n    }\r\n\r\n\r\n\r\n\r\n}\nvar NoiseSketch = function(section, img=null) {\r\n\r\n    this.img = img;\r\n    this.section = section;\r\n    \r\n\r\n    var clsp = this;\r\n    \r\n\r\n    this.sketch = function(p) {\r\n        const section = clsp.section;\r\n        let noiseScale = 0.02;\r\n        let fps;\r\n        let img = clsp.img;\r\n        let bgImg;\r\n        \r\n\r\n        \r\n\r\n        p.preload = () => {\r\n            if (img != null) {\r\n                bgImg = p.loadImage(img);    \r\n            }\r\n        }\r\n\r\n        p.setup = () => {\r\n\r\n            p.createCanvas(section.width(), section.outerHeight());\r\n            if (img != null) {\r\n                bgImg.loadPixels();\r\n            }\r\n            p.noLoop();   \r\n\r\n\r\n            \r\n\r\n        }\r\n\r\n        p.draw = () => {\r\n            p.background(13, 18, 24);\r\n\r\n            if (img != null) {\r\n                p.image(bgImg, 0, 0, section.width(), section.outerHeight());  \r\n            }\r\n            \r\n\r\n            \r\n            \r\n\r\n\r\n            p.stroke(255);\r\n\r\n            for (let x = 0; x < p.width; x++) {\r\n                let noiseVal = p.noise(x * noiseScale, noiseScale * 500);\r\n                p.line(x, (p.height - 50) + noiseVal * 80, x, p.height);\r\n            }\r\n\r\n        }\r\n\r\n        p.windowResized = () => {\r\n            p.resizeCanvas(section.width(), section.outerHeight());\r\n            \r\n        }\r\n    }\r\n}\r\n\r\nvar BubbleAndNum = function (section, val = 10, img = null) {\r\n\r\n    this.section = section;\r\n    this.val = val;\r\n    this.img = img;\r\n\r\n    // console.log(img);\r\n    \r\n\r\n\r\n    this.sketch = function (p) {\r\n        let bgimg;\r\n        \r\n\r\n        let rightWall = {\r\n            pos: {\r\n                x: section.outerWidth() / 2,\r\n                y: 0\r\n            },\r\n            size: {\r\n                width: section.outerWidth() / 2\r\n            }\r\n\r\n        };\r\n\r\n        let circles = [];\r\n        let numbers = [];\r\n\r\n        let objAmount = val;\r\n        let objSize;\r\n\r\n        let circleMouse;\r\n\r\n        p.setup = () => {\r\n            \r\n\r\n            p.createCanvas(section.outerWidth(), section.outerHeight());\r\n\r\n            p.background(255);\r\n\r\n            circleMouse = new Circle(0, 0, 50);\r\n\r\n            if (img != null) {\r\n                if (window.innerWidth <= 480) {\r\n                    bgimg = new BrainImg(img, 0, 0, 200, 170);\r\n                } else {\r\n                    bgimg = new BrainImg(img, 0, 0, 500, 430);\r\n                }   \r\n            }\r\n\r\n            if (screen.width <= 480) {\r\n                objSize = 30;\r\n            } else {\r\n                objSize = 50;\r\n            }\r\n\r\n            // Circles\r\n            for (let i = 0; i < objAmount; i++) {\r\n\r\n                let x = p.random(rightWall.pos.x, (rightWall.pos.x * 2) - 50);\r\n                let y = p.random(0, section.outerHeight());\r\n\r\n                let speedX = p.random(-1.5, 1.5);\r\n                let speedY = p.random(-1.5, 1.5);\r\n\r\n                if (speedX == 0) {\r\n                    speedX = 1;\r\n                }\r\n\r\n                if (speedY == 0) {\r\n                    speedY = 1;\r\n                }\r\n\r\n                circles[i] = new Circle(x, y, objSize, speedX, speedY);\r\n            }\r\n\r\n            // Numbers\r\n            for (let i = 0; i < objAmount; i++) {\r\n                let x = p.random(0, rightWall.pos.x - 50);\r\n                let y = p.random(0, section.outerHeight());\r\n\r\n                let speedX = p.random(-1.5, 1.5);\r\n                let speedY = p.random(-1.5, 1.5);\r\n\r\n                if (speedX == 0) {\r\n                    speedX = 1;\r\n                }\r\n\r\n                if (speedY == 0) {\r\n                    speedY = 1;\r\n                }\r\n\r\n                numbers[i] = new Text(i, x, y, objSize, speedX, speedY);\r\n            }\r\n\r\n            p.frameRate(60);\r\n        }\r\n\r\n        p.draw = () => {\r\n\r\n            p.background(255);\r\n\r\n            if (img != null) {\r\n                bgimg.update();\r\n                bgimg.draw();\r\n            }\r\n            \r\n            \r\n\r\n\r\n\r\n            p.strokeWeight(4);\r\n            p.stroke(156, 205, 207);\r\n\r\n            // Numbers\r\n            for (let i = 0; i < numbers.length; i++) {\r\n                const number = numbers[i];\r\n\r\n                number.update();\r\n                number.draw();\r\n\r\n                // p.fill(0, 255,0);\r\n                // p.ellipse(number.x, number.y, 5, 5);\r\n            }\r\n\r\n            // Circles\r\n            for (let i = 0; i < circles.length; i++) {\r\n\r\n                let overlapping = false;\r\n\r\n                circles[i].noFill();\r\n\r\n                circles[i].update();\r\n                circles[i].draw();\r\n\r\n                for (let other = 0; other < circles.length; other++) {\r\n                    if (i != other && circles[i].intersectCircle(circles[other])) {\r\n                        overlapping = true;\r\n                    }\r\n\r\n                }\r\n\r\n                if (overlapping) {\r\n                    circles[i].stroke([0, 98, 255]);\r\n\r\n                } else {\r\n                    circles[i].stroke([156, 205, 207]);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        p.windowResized = () => {\r\n\r\n            if (window.innerWidth <= 480) {\r\n                objAmount = 5;\r\n                objSize = 30;\r\n            } else {\r\n                objAmount = 10;\r\n                objSize = 50;\r\n            }\r\n\r\n            rightWall = {\r\n                pos: {\r\n                    x: section.outerWidth() / 2,\r\n                    y: 0\r\n                },\r\n                size: {\r\n                    width: section.outerWidth() / 2\r\n                }\r\n\r\n            };\r\n\r\n            if (window.innerWidth <= 480) {\r\n                BrainImg.width = 200;\r\n                BrainImg.height = 170;\r\n            } else {\r\n                BrainImg.width = 500;\r\n                BrainImg.height = 430;\r\n            }\r\n\r\n            if (window.innerWidth >= 1200) {\r\n                BrainImg.width = 700;\r\n                BrainImg.height = 630;\r\n            }\r\n\r\n            p.resizeCanvas(section.outerWidth(), section.outerHeight());\r\n        }\r\n\r\n        class Text {\r\n            constructor(text, x, y, size, speedX = 2, speedY = 2) {\r\n                this.text = text;\r\n\r\n                this.x = x + 50;\r\n                this.y = y + 50;\r\n\r\n                this.size = size;\r\n\r\n                this.speedX = speedX;\r\n                this.speedY = speedY;\r\n\r\n                this.fillColor = [156, 205, 207];\r\n            }\r\n\r\n            draw() {\r\n                p.noStroke();\r\n\r\n                p.fill(this.fillColor);\r\n                p.textSize(this.size);\r\n                p.text(this.text, this.x, this.y);\r\n\r\n            }\r\n\r\n            update() {\r\n                this.x += this.speedX;\r\n                this.y += this.speedY;\r\n\r\n                this.intersectWall();\r\n            }\r\n\r\n            intersectWall() {\r\n                if (this.x >= rightWall.pos.x - (this.size / 2)) {\r\n                    this.x = rightWall.pos.x - (this.size / 2);\r\n                    this.speedX *= -1;\r\n                }\r\n\r\n                if (this.x <= 0) {\r\n                    this.x = 0;\r\n                    this.speedX *= -1;\r\n\r\n                    // this.fillColor = [255, 0, 0];\r\n                }\r\n\r\n                if (this.y >= p.height) {\r\n                    this.y = p.height;\r\n                    this.speedY *= -1;\r\n                }\r\n\r\n                if (this.y - this.size <= 0) {\r\n                    this.y = this.size;\r\n                    this.speedY *= -1;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        class Circle {\r\n            constructor(x, y, size, speedX = 2, speedY = 2) {\r\n                this.x = x + 50;\r\n                this.y = y + 50;\r\n\r\n                this.size = size;\r\n\r\n                this.speedX = speedX;\r\n                this.speedY = speedY;\r\n\r\n                this.fillColor = 0;\r\n                this.strokeColor = 0;\r\n            }\r\n\r\n            draw() {\r\n                p.stroke(this.strokeColor);\r\n                if (this.noFill) {\r\n                    p.noFill();\r\n                } else {\r\n                    p.fill(this.fillColor);\r\n                }\r\n\r\n                p.ellipse(this.x, this.y, this.size, this.size);\r\n\r\n            }\r\n\r\n            update() {\r\n                this.x += this.speedX;\r\n                this.y += this.speedY;\r\n\r\n                this.intersectWall();\r\n            }\r\n\r\n            noFill(b) {\r\n                return b;\r\n            }\r\n\r\n            fill(color) {\r\n                this.fillColor = color;\r\n            }\r\n\r\n            stroke(color) {\r\n                this.strokeColor = color;\r\n            }\r\n\r\n            intersectCircle(other) {\r\n                let d = p.dist(this.x, this.y, other.x, other.y);\r\n                let fd = (this.size / 2) + (other.size / 2);\r\n\r\n                return d < fd;\r\n            }\r\n\r\n            intersectWall() {\r\n                if (this.x >= p.width - (this.size / 2)) {\r\n                    this.x = p.width - (this.size / 2);\r\n                    this.speedX = this.speedX * -1;\r\n                }\r\n\r\n                if (this.x <= rightWall.pos.x + (this.size / 2)) {\r\n                    this.x = rightWall.pos.x + this.size / 2;\r\n                    this.speedX = this.speedX * -1;\r\n                }\r\n\r\n                if (this.y >= p.height - (this.size / 2)) {\r\n                    this.y = p.height - (this.size / 2);\r\n                    this.speedY = this.speedY * -1;\r\n                }\r\n\r\n                if (this.y <= this.size / 2) {\r\n                    this.y = this.size / 2;\r\n                    this.speedY = this.speedY * -1;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        class BrainImg {\r\n            constructor(img, x, y, width, height) {\r\n                this.img = p.loadImage(img);\r\n\r\n                this.x = x;\r\n                this.y = y;\r\n\r\n                this.width = width;\r\n                this.height = height;\r\n            }\r\n\r\n            draw() {\r\n                p.image(this.img, this.x, this.y, this.width, this.height);\r\n                // console.log(this.img);\r\n                \r\n            }\r\n\r\n            update() {\r\n                this.x = (p.width / 2) - (this.width / 2);\r\n                this.y = (p.height / 2) - (this.height / 2);\r\n            }\r\n\r\n            followY(targetY, speedY) {\r\n                if (this.y < targetY) {\r\n                    this.y += speedY;\r\n                }\r\n\r\n                if (this.y > targetY) {\r\n                    this.y -= speedY;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\nconst sectionWork = document.querySelector('section#work');\r\nconst workArticles = document.querySelectorAll('section#work article');\r\n\r\n\r\n// for (let i = 0; i < workArticles.length; i++) {\r\n//     const article = workArticles[i];\r\n    \r\n//     const title = document.querySelector(`article.${article.classList}`);\r\n    \r\n\r\n//     article.addEventListener('mouseover', () => {\r\n//         title.classList.add('article-hover');\r\n//     });\r\n\r\n//     article.addEventListener('mouseleave', () => {\r\n//         title.classList.remove('article-hover');\r\n//     });\r\n\r\n// }\r\n\n// work sketch\r\n\r\nlet aboutSection = $('section#about');\r\nlet skillSection = $('section#skill');\r\n\r\nif (aboutSection.length) {\r\n    let showAboutSketch = new NoiseSketch(aboutSection, '/img/particles.jpg').sketch;\r\n\r\n    let showAboutSketch2 = new p5(showAboutSketch, 'about');\r\n}\r\n\r\n\r\nif (skillSection.length) {\r\n\r\n    let objTotal = 7;\r\n\r\n    if($(window).width() < 960){\r\n        objTotal = 4;\r\n        \r\n    }\r\n\r\n    let test = new BubbleAndNum(skillSection, 7, '/img/white-brain.jpg');\r\n\r\n    let skillSectionSketch2 = new p5(test.sketch, 'skill');\r\n}\r\n\r\n\n\r\nconst workSection = $('section#work');\r\nconst workWrapper = $('.work-wrapper');\r\nconst group = $('.work-group');\r\nconst workPaginator = $('.work-paginator');\r\n\r\nlet groupLength = workWrapper.children().length;\r\nlet visible = 1;\r\nlet index = 0;\r\nlet endIndex = (group.length / visible) - 1;\r\nlet active = true;\r\n\r\n\r\n\r\n\r\n\r\nfor (let i = 0; i < groupLength; i++) {\r\n    $('.work-paginator ul')\r\n    .append(`\r\n    <li><a>${i + 1}</a></li>\r\n    `);\r\n}\r\n\r\n    workPaginator.css('top', `-${(workSection.height() / 2) - 70}px`);\r\n\r\n    $(window).resize(function(){\r\n        workPaginator.css('top', `-${(workSection.height() / 2) - 70}px`);\r\n    })\r\n\r\n    updatePaginatorNumbers(1);  \r\n\r\n    $('.work-paginator ul li').click(function () {\r\n        updatePaginatorNumbers($(this).index() + 1);\r\n        \r\n        index = $(this).index();\r\n        leftWork(`-${group.width() * (index)}px`);\r\n\r\n    });\r\n    \r\n\r\n    $('.work-paginator .icon-arrow-left').click(() => {\r\n\r\n        if (active) {\r\n            active = false;\r\n\r\n            if (index > 0) {\r\n                previousWork();\r\n            } else {\r\n                endWork();\r\n            }\r\n\r\n            window.setTimeout(function () {\r\n                active = true;\r\n            }, 300);\r\n        }\r\n\r\n        \r\n\r\n        updatePaginatorNumbers(index + 1);\r\n    });\r\n\r\n    $('.work-paginator .icon-arrow-right').click(() => {\r\n\r\n\r\n        if (active) {\r\n            active = false;\r\n            if (index < endIndex) {\r\n                nextWork();\r\n            } else {\r\n                startWork();\r\n            }\r\n\r\n            window.setTimeout(function () {\r\n                active = true;\r\n            }, 300);\r\n        }\r\n        \r\n\r\n        updatePaginatorNumbers(index + 1);\r\n    });\r\n\r\n    function leftWork(pos) {\r\n        group.css({ 'left': pos });\r\n        \r\n    }\r\n\r\n    function previousWork() {\r\n        index--;\r\n        group.css({ 'left': `+=${group.width()}` });\r\n    }\r\n\r\n    function nextWork() {\r\n       \r\n        index++;\r\n        group.css({ 'left': `-=${group.width()}` });  \r\n \r\n    }\r\n\r\n    function startWork() {\r\n        index = 0;\r\n        group.css({ 'left': '0px' });\r\n    }\r\n\r\n    function endWork() {\r\n        index = endIndex;\r\n        group.css({ 'left': `-${group.width() * (groupLength - 1)}px` });\r\n        \r\n    }\r\n\r\n    function updatePaginatorNumbers(i) {\r\n        const num = $(`.work-paginator ul li:nth-child(${i})`);\r\n\r\n        $('.work-paginator ul li').removeClass('selected');\r\n\r\n        num.addClass('selected');\r\n    }\r\n\r\n\r\n\n// work sketch\r\n\r\nlet firstSectionWork = $('section#first');\r\nlet postContentSection = $('section#post-content');\r\n\r\n\r\n\r\n\r\nif (firstSectionWork.length) {\r\n    let showFirstSketch = new NoiseSketch(firstSectionWork, '/img/particles.jpg').sketch;\r\n\r\n    let showFirstSketch2 = new p5(showFirstSketch, 'first');\r\n}\r\n\r\nif (postContentSection.length && $(window).width() > 960) {\r\n\r\n    let objTotal = 10;\r\n\r\n    let test = new BubbleAndNum(postContentSection, objTotal);\r\n    \r\n    // let showPostSketch2 = new p5(test.sketch, 'post-content');\r\n}\r\n\r\n\n\r\n\r\n$('a[href*=\"#\"]')\r\n    // Remove links that don't actually link to anything\r\n    .not('[href=\"#\"]')\r\n    .not('[href=\"#0\"]')\r\n    .click(function (event) {\r\n        // On-page links\r\n        if (\r\n            location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\\//, '')\r\n            &&\r\n            location.hostname == this.hostname\r\n        ) {\r\n            // Figure out element to scroll to\r\n            var target = $(this.hash);\r\n            target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');\r\n            // Does a scroll target exist?\r\n            if (target.length) {\r\n                // Only prevent default if animation is actually gonna happen\r\n                event.preventDefault();\r\n                $('html, body').animate({\r\n                    scrollTop: target.offset().top\r\n                }, 500, function () {\r\n                    // Callback after animation\r\n                    // Must change focus!\r\n                    var $target = $(target);\r\n                    $target.focus();\r\n                    if ($target.is(\":focus\")) { // Checking if the target was focused\r\n                        return false;\r\n                    } else {\r\n                        $target.attr('tabindex', '-1'); // Adding tabindex for elements not focusable\r\n                        $target.focus(); // Set focus again\r\n                    };\r\n                });\r\n            }\r\n        }\r\n    });\r\n"]}