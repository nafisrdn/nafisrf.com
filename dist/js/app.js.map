{"version":3,"sources":["app.js"],"names":["nav","document","querySelector","navListParrent","navListItems","querySelectorAll","navToggle","firstSection","getOffsetTop","elem","offsetTop","isNaN","offsetParent","b","setAttribute","i","length","classList","add","console","log","remove","navShow","headerShow","window","addEventListener","e","offsetHeight","$","on","event","this","hash","speed","offset","preventDefault","height","animate","scrollTop","top","BubbleAndNum","section","val","arguments","undefined","img","pos","x","y","sketch","p","bgimg","rightWall","objAmount","objSize","size","width","outerWidth","circles","circleMouse","setup","createCanvas","outerHeight","background","Circle","innerWidth","BrainImg","random","screen","speedX","speedY","numbers","Text","frameRate","draw","number","update","strokeWeight","noFill","overlapping","other","intersectCircle","stroke","windowResized","resizeCanvas","text","_classCallCheck","noStroke","fill","textSize","fillColor","_createClass","key","value","intersectWall","strokeColor","ellipse","color","d","dist","fd","loadImage","image","targetY","aboutSection","skillSection","test","p5","contactSection","objTotal","workWrapper","group","workPaginator","groupLength","contactSectionSketch","index","workSection","visible","num","addClass","removeClass","firstSectionWork","resize","css","click","updatePaginatorNumbers","leftWork","left","active","nextWork","setTimeout","endIndex","startWork","postContentSection","showFirstSketch","NoiseSketch","clsp","bgImg","preload","noLoop","loadPixels","noiseVal","line","noise","noiseScale"],"mappings":"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","file":"app.js","sourcesContent":["const nav = document.querySelector('header#top nav.items');\r\nconst navListParrent = document.querySelector('header#top nav ul');\r\nconst navList = document.querySelector('header#top nav ul li');\r\nconst navListItems = document.querySelectorAll('header#top nav ul li a');\r\nconst navToggle = document.querySelector('.nav-toggle');\r\nconst firstSection = document.querySelector('body section');\r\n\r\nlet headerShow = false;\r\n\r\nnav.classList.add('nav-nobg');\r\n\r\nnavToggle.addEventListener('click', () => {\r\n    navShow(headerShow);\r\n    headerShow = !headerShow;\r\n});\r\n\r\nwindow.addEventListener('scroll', e => {\r\n\r\n    if (window.pageYOffset > getOffsetTop(firstSection) - (nav.offsetHeight / 2) &&\r\n        window.pageYOffset < getOffsetTop(firstSection) + firstSection.offsetHeight - (nav.offsetHeight / 2)) {\r\n\r\n        nav.classList.remove('nav-bg');\r\n    }else{\r\n        nav.classList.add('nav-bg');\r\n    }\r\n\r\n    // console.log(firstSection);\r\n    \r\n});\r\n\r\nfunction getOffsetTop(elem) {\r\n    var offsetTop = 0;\r\n    do {\r\n        if (!isNaN(elem.offsetTop)) {\r\n            offsetTop += elem.offsetTop;\r\n        }\r\n    } while (elem = elem.offsetParent);\r\n    return offsetTop;\r\n}\r\n\r\nfunction navShow(b) {\r\n    if (!b) {\r\n        navListParrent.setAttribute('style', `width: 200px;`);\r\n        for (let i = 0; i < navListItems.length; i++ ){\r\n            navListItems[i].setAttribute('style', 'right: 0;');\r\n        }\r\n        // overlay.setAttribute('style', 'display:block; opacity:0.5; z-index:100;');\r\n\r\n        navToggle.classList.add('is-open');\r\n    } else {\r\n        navListParrent.setAttribute('style', `width: 0px;`);\r\n        for (let i = 0; i < navListItems.length; i++) {\r\n            navListItems[i].setAttribute('style', 'right: -200px;');\r\n        }\r\n        console.log('umbau');\r\n        // nav.setAttribute('style', `transform:translateX(${navHideX}px);`)\r\n        // overlay.setAttribute('style', 'display:none; opacity:0; z-index:-100;');\r\n\r\n        navToggle.classList.remove('is-open');\r\n    }\r\n}\r\n\r\n$('body').scrollspy({ target: \"header#top\" });\r\n\r\n$(\"header#top a\").on('click', function (event) {\r\n\r\n\r\n\r\n    if (this.hash !== \"\") {\r\n\r\n        let speed = 600;\r\n        let offset = 0;\r\n\r\n        event.preventDefault();\r\n\r\n        var hash = this.hash;\r\n\r\n        if (hash == \"#work\") {\r\n            offset = ($(hash).height() / 2) - ($(window).height() / 2) + 60;\r\n        }\r\n\r\n        if (hash == \"#contact\") {\r\n            offset = 999;\r\n            speed = 800;\r\n        }\r\n\r\n        $('html, body').animate({\r\n            scrollTop: $(hash).offset().top + offset\r\n        }, speed, function () {\r\n            // window.location.hash = hash;\r\n        });\r\n\r\n    }\r\n\r\n});\nvar NoiseSketch = function(section, img=null) {\r\n\r\n    this.img = img;\r\n    this.section = section;\r\n    \r\n\r\n    var clsp = this;\r\n    \r\n\r\n    this.sketch = function(p) {\r\n        const section = clsp.section;\r\n        let noiseScale = 0.02;\r\n        let fps;\r\n        let img = clsp.img;\r\n        let bgImg;\r\n        \r\n\r\n        \r\n\r\n        p.preload = () => {\r\n            if (img != null) {\r\n                bgImg = p.loadImage(img);    \r\n            }\r\n        }\r\n\r\n        p.setup = () => {\r\n\r\n            p.createCanvas(section.width(), section.outerHeight());\r\n            if (img != null) {\r\n                bgImg.loadPixels();\r\n            }\r\n            p.noLoop();   \r\n\r\n\r\n            \r\n\r\n        }\r\n\r\n        p.draw = () => {\r\n            p.background(13, 18, 24);\r\n\r\n            if (img != null) {\r\n                p.image(bgImg, 0, 0, section.width(), section.outerHeight());  \r\n            }\r\n            \r\n\r\n            \r\n            \r\n\r\n\r\n            p.stroke(255);\r\n\r\n            for (let x = 0; x < p.width; x++) {\r\n                let noiseVal = p.noise(x * noiseScale, noiseScale * 500);\r\n                p.line(x, (p.height - 50) + noiseVal * 80, x, p.height);\r\n            }\r\n\r\n        }\r\n\r\n        p.windowResized = () => {\r\n            p.resizeCanvas(section.width(), section.outerHeight());\r\n            \r\n        }\r\n    }\r\n}\r\n\r\nvar BubbleAndNum = function (section, val = 10, img = null) {\r\n\r\n    this.section = section;\r\n    this.val = val;\r\n    this.img = img;\r\n\r\n    // console.log(img);\r\n    \r\n\r\n\r\n    this.sketch = function (p) {\r\n        let bgimg;\r\n        \r\n\r\n        let rightWall = {\r\n            pos: {\r\n                x: section.outerWidth() / 2,\r\n                y: 0\r\n            },\r\n            size: {\r\n                width: section.outerWidth() / 2\r\n            }\r\n\r\n        };\r\n\r\n        let circles = [];\r\n        let numbers = [];\r\n\r\n        let objAmount = val;\r\n        let objSize;\r\n\r\n        let circleMouse;\r\n\r\n        p.setup = () => {\r\n            \r\n\r\n            p.createCanvas(section.outerWidth(), section.outerHeight());\r\n\r\n            p.background(255);\r\n\r\n            circleMouse = new Circle(0, 0, 50);\r\n\r\n            if (img != null) {\r\n                if (window.innerWidth <= 480) {\r\n                    bgimg = new BrainImg(img, 0, 0, 200, 170);\r\n                } else {\r\n                    bgimg = new BrainImg(img, 0, 0, 500, 430);\r\n                }   \r\n            }\r\n\r\n            if (screen.width <= 480) {\r\n                objSize = 30;\r\n            } else {\r\n                objSize = 50;\r\n            }\r\n\r\n            // Circles\r\n            for (let i = 0; i < objAmount; i++) {\r\n\r\n                let x = p.random(rightWall.pos.x, (rightWall.pos.x * 2) - 50);\r\n                let y = p.random(0, section.outerHeight());\r\n\r\n                let speedX = p.random(-1.5, 1.5);\r\n                let speedY = p.random(-1.5, 1.5);\r\n\r\n                if (speedX == 0) {\r\n                    speedX = 1;\r\n                }\r\n\r\n                if (speedY == 0) {\r\n                    speedY = 1;\r\n                }\r\n\r\n                circles[i] = new Circle(x, y, objSize, speedX, speedY);\r\n            }\r\n\r\n            // Numbers\r\n            for (let i = 0; i < objAmount; i++) {\r\n                let x = p.random(0, rightWall.pos.x - 50);\r\n                let y = p.random(0, section.outerHeight());\r\n\r\n                let speedX = p.random(-1.5, 1.5);\r\n                let speedY = p.random(-1.5, 1.5);\r\n\r\n                if (speedX == 0) {\r\n                    speedX = 1;\r\n                }\r\n\r\n                if (speedY == 0) {\r\n                    speedY = 1;\r\n                }\r\n\r\n                numbers[i] = new Text(i, x, y, objSize, speedX, speedY);\r\n            }\r\n\r\n            p.frameRate(60);\r\n        }\r\n\r\n        p.draw = () => {\r\n\r\n            p.background(255);\r\n\r\n            if (img != null) {\r\n                bgimg.update();\r\n                bgimg.draw();\r\n            }\r\n            \r\n            \r\n\r\n\r\n\r\n            p.strokeWeight(4);\r\n            p.stroke(156, 205, 207);\r\n\r\n            // Numbers\r\n            for (let i = 0; i < numbers.length; i++) {\r\n                const number = numbers[i];\r\n\r\n                number.update();\r\n                number.draw();\r\n\r\n                // p.fill(0, 255,0);\r\n                // p.ellipse(number.x, number.y, 5, 5);\r\n            }\r\n\r\n            // Circles\r\n            for (let i = 0; i < circles.length; i++) {\r\n\r\n                let overlapping = false;\r\n\r\n                circles[i].noFill();\r\n\r\n                circles[i].update();\r\n                circles[i].draw();\r\n\r\n                for (let other = 0; other < circles.length; other++) {\r\n                    if (i != other && circles[i].intersectCircle(circles[other])) {\r\n                        overlapping = true;\r\n                    }\r\n\r\n                }\r\n\r\n                if (overlapping) {\r\n                    circles[i].stroke([0, 98, 255]);\r\n\r\n                } else {\r\n                    circles[i].stroke([156, 205, 207]);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        p.windowResized = () => {\r\n\r\n            if (window.innerWidth <= 480) {\r\n                objAmount = 5;\r\n                objSize = 30;\r\n            } else {\r\n                objAmount = 10;\r\n                objSize = 50;\r\n            }\r\n\r\n            rightWall = {\r\n                pos: {\r\n                    x: section.outerWidth() / 2,\r\n                    y: 0\r\n                },\r\n                size: {\r\n                    width: section.outerWidth() / 2\r\n                }\r\n\r\n            };\r\n\r\n            if (window.innerWidth <= 480) {\r\n                BrainImg.width = 200;\r\n                BrainImg.height = 170;\r\n            } else {\r\n                BrainImg.width = 500;\r\n                BrainImg.height = 430;\r\n            }\r\n\r\n            if (window.innerWidth >= 1200) {\r\n                BrainImg.width = 700;\r\n                BrainImg.height = 630;\r\n            }\r\n\r\n            p.resizeCanvas(section.outerWidth(), section.outerHeight());\r\n        }\r\n\r\n        class Text {\r\n            constructor(text, x, y, size, speedX = 2, speedY = 2) {\r\n                this.text = text;\r\n\r\n                this.x = x + 50;\r\n                this.y = y + 50;\r\n\r\n                this.size = size;\r\n\r\n                this.speedX = speedX;\r\n                this.speedY = speedY;\r\n\r\n                this.fillColor = [156, 205, 207];\r\n            }\r\n\r\n            draw() {\r\n                p.noStroke();\r\n\r\n                p.fill(this.fillColor);\r\n                p.textSize(this.size);\r\n                p.text(this.text, this.x, this.y);\r\n\r\n            }\r\n\r\n            update() {\r\n                this.x += this.speedX;\r\n                this.y += this.speedY;\r\n\r\n                this.intersectWall();\r\n            }\r\n\r\n            intersectWall() {\r\n                if (this.x >= rightWall.pos.x - (this.size / 2)) {\r\n                    this.x = rightWall.pos.x - (this.size / 2);\r\n                    this.speedX *= -1;\r\n                }\r\n\r\n                if (this.x <= 0) {\r\n                    this.x = 0;\r\n                    this.speedX *= -1;\r\n\r\n                    // this.fillColor = [255, 0, 0];\r\n                }\r\n\r\n                if (this.y >= p.height) {\r\n                    this.y = p.height;\r\n                    this.speedY *= -1;\r\n                }\r\n\r\n                if (this.y - this.size <= 0) {\r\n                    this.y = this.size;\r\n                    this.speedY *= -1;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        class Circle {\r\n            constructor(x, y, size, speedX = 2, speedY = 2) {\r\n                this.x = x + 50;\r\n                this.y = y + 50;\r\n\r\n                this.size = size;\r\n\r\n                this.speedX = speedX;\r\n                this.speedY = speedY;\r\n\r\n                this.fillColor = 0;\r\n                this.strokeColor = 0;\r\n            }\r\n\r\n            draw() {\r\n                p.stroke(this.strokeColor);\r\n                if (this.noFill) {\r\n                    p.noFill();\r\n                } else {\r\n                    p.fill(this.fillColor);\r\n                }\r\n\r\n                p.ellipse(this.x, this.y, this.size, this.size);\r\n\r\n            }\r\n\r\n            update() {\r\n                this.x += this.speedX;\r\n                this.y += this.speedY;\r\n\r\n                this.intersectWall();\r\n            }\r\n\r\n            noFill(b) {\r\n                return b;\r\n            }\r\n\r\n            fill(color) {\r\n                this.fillColor = color;\r\n            }\r\n\r\n            stroke(color) {\r\n                this.strokeColor = color;\r\n            }\r\n\r\n            intersectCircle(other) {\r\n                let d = p.dist(this.x, this.y, other.x, other.y);\r\n                let fd = (this.size / 2) + (other.size / 2);\r\n\r\n                return d < fd;\r\n            }\r\n\r\n            intersectWall() {\r\n                if (this.x >= p.width - (this.size / 2)) {\r\n                    this.x = p.width - (this.size / 2);\r\n                    this.speedX = this.speedX * -1;\r\n                }\r\n\r\n                if (this.x <= rightWall.pos.x + (this.size / 2)) {\r\n                    this.x = rightWall.pos.x + this.size / 2;\r\n                    this.speedX = this.speedX * -1;\r\n                }\r\n\r\n                if (this.y >= p.height - (this.size / 2)) {\r\n                    this.y = p.height - (this.size / 2);\r\n                    this.speedY = this.speedY * -1;\r\n                }\r\n\r\n                if (this.y <= this.size / 2) {\r\n                    this.y = this.size / 2;\r\n                    this.speedY = this.speedY * -1;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        class BrainImg {\r\n            constructor(img, x, y, width, height) {\r\n                this.img = p.loadImage(img);\r\n\r\n                this.x = x;\r\n                this.y = y;\r\n\r\n                this.width = width;\r\n                this.height = height;\r\n            }\r\n\r\n            draw() {\r\n                p.image(this.img, this.x, this.y, this.width, this.height);\r\n                // console.log(this.img);\r\n                \r\n            }\r\n\r\n            update() {\r\n                this.x = (p.width / 2) - (this.width / 2);\r\n                this.y = (p.height / 2) - (this.height / 2);\r\n            }\r\n\r\n            followY(targetY, speedY) {\r\n                if (this.y < targetY) {\r\n                    this.y += speedY;\r\n                }\r\n\r\n                if (this.y > targetY) {\r\n                    this.y -= speedY;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\nconst sectionWork = document.querySelector('section#work');\r\nconst workArticles = document.querySelectorAll('section#work article');\r\n\r\n$('.contact-btn').on('click', function () {\r\n    $('html, body').animate({\r\n        scrollTop: $('html').height()\r\n    }, 800, function () {\r\n        // window.location.hash = '';\r\n    });\r\n});\r\n\n// work sketch\r\n\r\nlet aboutSection = $('section#about');\r\nlet skillSection = $('section#skill');\r\nlet contactSection = $('section#contact');\r\n\r\nif (aboutSection.length) {\r\n    // let showAboutSketch = new NoiseSketch(aboutSection, '/img/particles.jpg').sketch;\r\n\r\n    // let showAboutSketch2 = new p5(showAboutSketch, 'about');\r\n}\r\n\r\n\r\nif (skillSection.length) {\r\n\r\n    let objTotal = 7;\r\n\r\n    if($(window).width() < 960){\r\n        objTotal = 4;\r\n        \r\n    }\r\n\r\n    let test = new BubbleAndNum(skillSection, 7, '/img/white-brain.jpg');\r\n\r\n    let skillSectionSketch2 = new p5(test.sketch, 'skill');\r\n}\r\n\r\nif (contactSection.length) {\r\n    let objTotal = 5;\r\n\r\n    if ($(window).width() < 960) {\r\n        objTotal = 3;\r\n    }\r\n\r\n    let test = new BubbleAndNum(contactSection, objTotal);\r\n\r\n    let contactSectionSketch = new p5(test.sketch, 'contact');\r\n}\r\n\n\r\nconst workSection = $('section#work');\r\nconst workWrapper = $('.work-wrapper');\r\nconst group = $('.work-group');\r\nconst workPaginator = $('.work-paginator');\r\n\r\nlet groupLength = workWrapper.children().length;\r\nlet visible = 1;\r\nlet index = 0;\r\nlet endIndex = (group.length / visible) - 1;\r\nlet active = true;\r\n\r\n\r\nfor (let i = 0; i < groupLength; i++) {\r\n    $('.work-paginator ul')\r\n    .append(`\r\n    <li><a>${i + 1}</a></li>\r\n    `);\r\n}\r\n\r\n    workPaginator.css('top', `-${(workSection.height() / 2) - 70}px`);\r\n\r\n    $(window).resize(function(){\r\n        workPaginator.css('top', `-${(workSection.height() / 2) - 70}px`);\r\n    })\r\n\r\n    updatePaginatorNumbers(1);  \r\n\r\n    $('.work-paginator ul li').click(function () {\r\n        updatePaginatorNumbers($(this).index() + 1);\r\n        \r\n        index = $(this).index();\r\n        leftWork(`-${group.width() * (index)}px`);\r\n\r\n    });\r\n    \r\n\r\n    $('.work-paginator .icon-arrow-left').click(() => {\r\n\r\n        if (active) {\r\n            active = false;\r\n\r\n            if (index > 0) {\r\n                previousWork();\r\n            } else {\r\n                endWork();\r\n            }\r\n\r\n            window.setTimeout(function () {\r\n                active = true;\r\n            }, 300);\r\n        }\r\n\r\n        \r\n\r\n        updatePaginatorNumbers(index + 1);\r\n    });\r\n\r\n    $('.work-paginator .icon-arrow-right').click(() => {\r\n\r\n\r\n        if (active) {\r\n            active = false;\r\n            if (index < endIndex) {\r\n                nextWork();\r\n            } else {\r\n                startWork();\r\n            }\r\n\r\n            window.setTimeout(function () {\r\n                active = true;\r\n            }, 300);\r\n        }\r\n        \r\n\r\n        updatePaginatorNumbers(index + 1);\r\n    });\r\n\r\n    function leftWork(pos) {\r\n        group.css({ 'left': pos });\r\n        \r\n    }\r\n\r\n    function previousWork() {\r\n        index--;\r\n        group.css({ 'left': `+=${group.width()}` });\r\n    }\r\n\r\n    function nextWork() {\r\n       \r\n        index++;\r\n        group.css({ 'left': `-=${group.width()}` });  \r\n \r\n    }\r\n\r\n    function startWork() {\r\n        index = 0;\r\n        group.css({ 'left': '0px' });\r\n    }\r\n\r\n    function endWork() {\r\n        index = endIndex;\r\n        group.css({ 'left': `-${group.width() * (groupLength - 1)}px` });\r\n        \r\n    }\r\n\r\n    function updatePaginatorNumbers(i) {\r\n        const num = $(`.work-paginator ul li:nth-child(${i})`);\r\n\r\n        $('.work-paginator ul li').removeClass('selected');\r\n\r\n        num.addClass('selected');\r\n    }\r\n\r\n\r\n\n// work sketch\r\n\r\nlet firstSectionWork = $('section#first');\r\nlet postContentSection = $('section#post-content');\r\n\r\n\r\n\r\n\r\nif (firstSectionWork.length) {\r\n    let showFirstSketch = new NoiseSketch(firstSectionWork, '/img/particles.jpg').sketch;\r\n\r\n    let showFirstSketch2 = new p5(showFirstSketch, 'first');\r\n}\r\n\r\nif (postContentSection.length && $(window).width() > 960) {\r\n\r\n    let objTotal = 10;\r\n\r\n    let test = new BubbleAndNum(postContentSection, objTotal);\r\n    \r\n    // let showPostSketch2 = new p5(test.sketch, 'post-content');\r\n}\r\n\r\n\n"]}