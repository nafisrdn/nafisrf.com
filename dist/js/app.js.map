{"version":3,"sources":["app.js"],"names":["nav","document","querySelector","navListParrent","navList","navListItems","querySelectorAll","navToggle","firstSection","getOffsetTop","elem","offsetTop","isNaN","offsetParent","navShow","b","setAttribute","i","length","classList","add","console","log","remove","headerShow","window","addEventListener","e","offsetHeight","noiseSketch","this","img","section","clsp","sketch","noiseScale","bgImg","p","preload","width","createCanvas","loadPixels","setup","draw","height","background","noLoop","x","line","noiseVal","stroke","resizeCanvas","noise","showAboutSketch","aboutSection","$","showAboutSketch2","p5","sectionWork","workArticles","skillSketch","getElementById","id","brain","size","rightWall","offsetWidth","pos","circles","numbers","objAmount","objSize","skillSection","loadImage","Circle","innerWidth","BrainImg","screen","random","speedX","speedY","y","Text","frameRate","update","strokeWeight","number","overlapping","other","intersectCircle","text","arguments","undefined","_classCallCheck","fillColor","_createClass","key","value","noStroke","fill","textSize","intersectWall","strokeColor","noFill","ellipse","color","dist","fd","image","targetY","showSkillSketch","workSection","workWrapper","group","workPaginator","groupLength","children","visible","index","endIndex","active","append","ready","updatePaginatorNumbers","num","addClass","click","leftWork","css","left","setTimeout","nextWork","preventDefault","forEach","anchor","getAttribute","behavior","scrollIntoView"],"mappings":"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","file":"app.js","sourcesContent":["const nav = document.querySelector('header#top nav.items');\r\nconst navListParrent = document.querySelector('header#top nav ul');\r\nconst navList = document.querySelector('header#top nav ul li');\r\nconst navListItems = document.querySelectorAll('header#top nav ul li a');\r\nconst navToggle = document.querySelector('.nav-toggle');\r\nconst firstSection = document.querySelector('body section');\r\n\r\nlet headerShow = false;\r\n\r\nnav.classList.add('nav-nobg');\r\n\r\nnavToggle.addEventListener('click', () => {\r\n    navShow(headerShow);\r\n    headerShow = !headerShow;\r\n});\r\n\r\nwindow.addEventListener('scroll', e => {\r\n\r\n    if (window.pageYOffset > getOffsetTop(firstSection) - (nav.offsetHeight / 2) &&\r\n        window.pageYOffset < getOffsetTop(firstSection) + firstSection.offsetHeight - (nav.offsetHeight / 2)) {\r\n\r\n        nav.classList.remove('nav-bg');\r\n    }else{\r\n        nav.classList.add('nav-bg');\r\n    }\r\n\r\n    // console.log(firstSection);\r\n    \r\n});\r\n\r\nfunction getOffsetTop(elem) {\r\n    var offsetTop = 0;\r\n    do {\r\n        if (!isNaN(elem.offsetTop)) {\r\n            offsetTop += elem.offsetTop;\r\n        }\r\n    } while (elem = elem.offsetParent);\r\n    return offsetTop;\r\n}\r\n\r\nfunction navShow(b) {\r\n    if (!b) {\r\n        navListParrent.setAttribute('style', `width: 200px;`);\r\n        for (let i = 0; i < navListItems.length; i++ ){\r\n            navListItems[i].setAttribute('style', 'right: 0;');\r\n        }\r\n        // overlay.setAttribute('style', 'display:block; opacity:0.5; z-index:100;');\r\n\r\n        navToggle.classList.add('is-open');\r\n    } else {\r\n        navListParrent.setAttribute('style', `width: 0px;`);\r\n        for (let i = 0; i < navListItems.length; i++) {\r\n            navListItems[i].setAttribute('style', 'right: -200px;');\r\n        }\r\n        console.log('umbau');\r\n        // nav.setAttribute('style', `transform:translateX(${navHideX}px);`)\r\n        // overlay.setAttribute('style', 'display:none; opacity:0; z-index:-100;');\r\n\r\n        navToggle.classList.remove('is-open');\r\n    }\r\n\r\n\r\n\r\n\r\n}\nvar noiseSketch = function(section, img) {\r\n\r\n    this.img = img;\r\n    this.section = section;\r\n\r\n    var clsp = this;\r\n    \r\n\r\n    this.sketch = function(p) {\r\n        const section = clsp.section;\r\n        let noiseScale = 0.02;\r\n        let fps;\r\n        let bgImg;\r\n\r\n\r\n        console.log(section.width());\r\n        \r\n\r\n        \r\n\r\n        p.preload = () => {\r\n            bgImg = p.loadImage(clsp.img);\r\n        }\r\n\r\n        p.setup = () => {\r\n            p.createCanvas(section.width(), section.height());\r\n            bgImg.loadPixels();\r\n            p.noLoop();\r\n\r\n        }\r\n\r\n        p.draw = () => {\r\n            p.background(13, 18, 24);\r\n\r\n            p.image(bgImg, 0, 0, section.width(), section.height());\r\n\r\n\r\n            p.stroke(255);\r\n\r\n            for (let x = 0; x < p.width; x++) {\r\n                let noiseVal = p.noise(x * noiseScale, noiseScale * 500);\r\n                p.line(x, (p.height - 50) + noiseVal * 80, x, p.height);\r\n            }\r\n\r\n        }\r\n\r\n        p.windowResized = () => {\r\n            p.resizeCanvas(section.width(), section.height());\r\n        }\r\n    }\r\n}\r\n\nlet aboutSection = $('#about');\r\n\r\nlet showAboutSketch = new noiseSketch(aboutSection, '/img/particles.jpg').sketch;\r\n\r\nlet showAboutSketch2 = new p5(showAboutSketch, 'about');\nconst sectionWork = document.querySelector('section#work');\r\nconst workArticles = document.querySelectorAll('section#work article');\r\n\r\n\r\n// for (let i = 0; i < workArticles.length; i++) {\r\n//     const article = workArticles[i];\r\n    \r\n//     const title = document.querySelector(`article.${article.classList}`);\r\n    \r\n\r\n//     article.addEventListener('mouseover', () => {\r\n//         title.classList.add('article-hover');\r\n//     });\r\n\r\n//     article.addEventListener('mouseleave', () => {\r\n//         title.classList.remove('article-hover');\r\n//     });\r\n\r\n// }\r\n\n\r\nlet skillSection = {\r\n    e: document.getElementById('skill'),\r\n    id: 'skill',\r\n    size:{\r\n        width: document.getElementById('skill').offsetWidth,\r\n        height: document.getElementById('skill').offsetHeight\r\n    }\r\n}\r\n\r\nlet skillSketch = function(p){\r\n\r\n    let brain;\r\n\r\n    let rightWall = {\r\n        pos: {\r\n            x: skillSection.e.offsetWidth / 2,\r\n            y: 0\r\n        },\r\n        size: {\r\n            width: skillSection.e.offsetWidth / 2\r\n        }\r\n\r\n    };\r\n\r\n    let circles = [];\r\n    let numbers = [];\r\n\r\n    let objAmount;\r\n    let objSize;\r\n\r\n    let circleMouse;\r\n\r\n    p.setup = () => {\r\n\r\n        p.createCanvas(skillSection.e.offsetWidth, skillSection.e.offsetHeight);\r\n\r\n        p.background(255);\r\n\r\n        circleMouse = new Circle(0, 0, 50);\r\n        \r\n        if (window.innerWidth <= 480){\r\n            brain = new BrainImg(p.loadImage('/img/white-brain.jpg'), 0, 0, 200, 170);\r\n        }else{\r\n            brain = new BrainImg(p.loadImage('/img/white-brain.jpg'),0, 0, 500, 430);\r\n        }\r\n\r\n        if (screen.width <= 480) {\r\n            objAmount = 4;\r\n            objSize = 30;\r\n        }else{\r\n            objAmount = 4;\r\n            objSize = 50;\r\n        }\r\n\r\n        // Circles\r\n        for (let i = 0; i < objAmount; i++){\r\n\r\n            let x = p.random(rightWall.pos.x, (rightWall.pos.x * 2) - 50);\r\n            let y = p.random(0, skillSection.e.offsetHeight);\r\n\r\n            let speedX = p.random(-1.5, 1.5);\r\n            let speedY = p.random(-1.5, 1.5);\r\n\r\n            if (speedX == 0){\r\n                speedX = 1;\r\n            }\r\n\r\n            if (speedY == 0){\r\n                speedY = 1;\r\n            }\r\n\r\n            circles[i] = new Circle(x, y, objSize, speedX, speedY);\r\n        }\r\n\r\n        // Numbers\r\n        for (let i = 0; i < objAmount; i++){\r\n            let x = p.random(0, rightWall.pos.x - 50);\r\n            let y = p.random(0, skillSection.e.offsetHeight);\r\n\r\n            let speedX = p.random(-1.5, 1.5);\r\n            let speedY = p.random(-1.5, 1.5);\r\n\r\n            if (speedX == 0) {\r\n                speedX = 1;\r\n            }\r\n\r\n            if (speedY == 0) {\r\n                speedY = 1;\r\n            }\r\n\r\n            numbers[i] = new Text(i, x, y, objSize, speedX, speedY);\r\n        }\r\n\r\n        p.frameRate(60);\r\n    }\r\n\r\n    p.draw = () => {\r\n\r\n        p.background(255);\r\n\r\n        brain.update();\r\n        brain.draw();\r\n\r\n        \r\n\r\n        p.strokeWeight(4);\r\n        p.stroke(156, 205, 207);\r\n\r\n        // circleMouse.draw();\r\n\r\n        // Numbers\r\n        for (let i = 0; i < numbers.length; i++) {\r\n            const number = numbers[i];\r\n\r\n            number.update();\r\n            number.draw();\r\n\r\n            // p.fill(0, 255,0);\r\n            // p.ellipse(number.x, number.y, 5, 5);\r\n        }\r\n\r\n        // Circles\r\n        for (let i = 0; i < circles.length; i++){\r\n\r\n            let overlapping = false;\r\n\r\n            circles[i].noFill();\r\n\r\n            circles[i].update();\r\n            circles[i].draw();\r\n\r\n            for (let other = 0; other < circles.length; other++){\r\n                if (i != other && circles[i].intersectCircle(circles[other])){\r\n                    overlapping = true;\r\n                }\r\n                \r\n            }\r\n\r\n            if (overlapping) {\r\n                circles[i].stroke([0, 98, 255]);\r\n\r\n            } else {\r\n                circles[i].stroke([156, 205, 207]);\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    p.windowResized = () => {\r\n\r\n        if (window.innerWidth <= 480) {\r\n            objAmount = 5;\r\n        } else {\r\n            objAmount = 10;\r\n        }\r\n        \r\n\r\n        rightWall = {\r\n            pos: {\r\n                x: skillSection.e.offsetWidth / 2,\r\n                y: 0\r\n            },\r\n            size: {\r\n                width: skillSection.e.offsetWidth / 2\r\n            }\r\n\r\n        };\r\n\r\n        if (window.innerWidth <= 480) {\r\n            brain.width = 200;\r\n            brain.height = 170;\r\n        } else {\r\n            brain.width = 500;\r\n            brain.height = 430;\r\n        }\r\n\r\n        if (window.innerWidth >= 1200){\r\n            brain.width = 700;\r\n            brain.height = 630;\r\n        }\r\n\r\n        p.resizeCanvas(skillSection.e.offsetWidth, skillSection.e.offsetHeight);\r\n    }\r\n\r\n    class Text {\r\n        constructor(text, x, y, size, speedX = 2, speedY = 2) {\r\n            this.text = text;\r\n\r\n            this.x = x + 50;\r\n            this.y = y + 50;\r\n\r\n            this.size = size;\r\n\r\n            this.speedX = speedX;\r\n            this.speedY = speedY;\r\n\r\n            this.fillColor = [156, 205, 207];\r\n        }\r\n\r\n        draw() {\r\n            p.noStroke();\r\n\r\n            p.fill(this.fillColor);\r\n            p.textSize(this.size);\r\n            p.text(this.text, this.x, this.y);\r\n\r\n        }\r\n\r\n        update() {\r\n            this.x += this.speedX;\r\n            this.y += this.speedY;\r\n\r\n            this.intersectWall();\r\n        }\r\n\r\n        intersectWall() {\r\n            if (this.x >= rightWall.pos.x - (this.size / 2)) {\r\n                this.x = rightWall.pos.x - (this.size / 2);\r\n                this.speedX *= -1;\r\n            }\r\n\r\n            if (this.x <= 0) {\r\n                this.x = 0;\r\n                this.speedX *= -1;\r\n\r\n                // this.fillColor = [255, 0, 0];\r\n            }\r\n\r\n            if (this.y >= p.height) {\r\n                this.y = p.height;\r\n                this.speedY *=  -1;\r\n            }\r\n\r\n            if (this.y - this.size <= 0) {\r\n                this.y = this.size;\r\n                this.speedY *= -1;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    class Circle{\r\n        constructor(x, y, size, speedX=2, speedY=2){\r\n            this.x = x + 50;\r\n            this.y = y + 50;\r\n            \r\n            this.size = size;\r\n            \r\n            this.speedX = speedX;\r\n            this.speedY = speedY;\r\n\r\n            this.fillColor = 0;\r\n            this.strokeColor = 0;\r\n        }\r\n\r\n        draw(){\r\n            p.stroke(this.strokeColor);\r\n            if (this.noFill){\r\n                p.noFill();\r\n            }else{\r\n                p.fill(this.fillColor);\r\n            }\r\n\r\n            p.ellipse(this.x, this.y, this.size, this.size);\r\n            \r\n        }\r\n\r\n        update(){\r\n            this.x += this.speedX;\r\n            this.y += this.speedY;\r\n\r\n            this.intersectWall();\r\n        }\r\n\r\n        noFill(b){\r\n            return b;\r\n        }\r\n\r\n        fill(color){\r\n            this.fillColor = color;\r\n        }\r\n\r\n        stroke(color){\r\n            this.strokeColor = color;\r\n        }\r\n\r\n        intersectCircle(other){\r\n            let d = p.dist(this.x, this.y, other.x, other.y);\r\n            let fd = (this.size / 2) + (other.size /2);\r\n\r\n            return d < fd; \r\n        }\r\n\r\n        intersectWall(){\r\n            if (this.x >= p.width - (this.size / 2)) {\r\n                this.x = p.width - (this.size / 2);\r\n                this.speedX = this.speedX * -1;\r\n            }\r\n\r\n            if (this.x <= rightWall.pos.x + (this.size / 2)) {\r\n                this.x = rightWall.pos.x + this.size / 2;\r\n                this.speedX = this.speedX * -1;\r\n            }\r\n\r\n            if (this.y >= p.height - (this.size / 2)) {\r\n                this.y = p.height - (this.size / 2);\r\n                this.speedY = this.speedY * -1;\r\n            }\r\n\r\n            if (this.y <= this.size / 2) {\r\n                this.y = this.size / 2;\r\n                this.speedY = this.speedY * -1;\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    class BrainImg {\r\n        constructor(img, x, y, width, height) {\r\n            this.img = img;\r\n\r\n            this.x = x;\r\n            this.y = y;\r\n\r\n            this.width = width;\r\n            this.height = height;\r\n        }\r\n\r\n        draw() {\r\n            p.image(this.img, this.x, this.y, this.width, this.height);\r\n        }\r\n\r\n        update() {\r\n            this.x = (p.width / 2) - (this.width / 2);\r\n            this.y = (p.height / 2) - (this.height / 2);\r\n        }\r\n\r\n        followY(targetY, speedY) {\r\n            if (this.y < targetY) {\r\n                this.y += speedY;\r\n            }\r\n\r\n            if (this.y > targetY) {\r\n                this.y -= speedY;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlet showSkillSketch = new p5(skillSketch, skillSection.id);\n\r\nconst workSection = $('section#work');\r\nconst workWrapper = $('.work-wrapper');\r\nconst group = $('.work-group');\r\nconst workPaginator = $('.work-paginator');\r\n\r\nlet groupLength = workWrapper.children().length;\r\nlet visible = 1;\r\nlet index = 0;\r\nlet endIndex = (group.length / visible) - 1;\r\nlet active = true;\r\n\r\n\r\n\r\n\r\n\r\nfor (let i = 0; i < groupLength; i++) {\r\n    $('.work-paginator ul')\r\n    .append(`\r\n    <li><a href='#work'>${i + 1}</a></li>\r\n    `);\r\n}\r\n\r\n$(document).ready(function() {\r\n    workPaginator.css('top', `-${(workSection.height() / 2) - 70}px`);\r\n\r\n    updatePaginatorNumbers(1);  \r\n\r\n    $('.work-paginator ul li').click(function () {\r\n        updatePaginatorNumbers($(this).index() + 1);\r\n        \r\n        index = $(this).index();\r\n        leftWork(`-${group.width() * (index)}px`);\r\n\r\n    });\r\n    \r\n\r\n    $('.work-paginator .icon-arrow-left').click(() => {\r\n\r\n        if (active) {\r\n            active = false;\r\n\r\n            if (index > 0) {\r\n                previousWork();\r\n            } else {\r\n                endWork();\r\n            }\r\n\r\n            window.setTimeout(function () {\r\n                active = true;\r\n            }, 300);\r\n        }\r\n\r\n        \r\n\r\n        updatePaginatorNumbers(index + 1);\r\n    });\r\n\r\n    $('.work-paginator .icon-arrow-right').click(() => {\r\n\r\n\r\n        if (active) {\r\n            active = false;\r\n            if (index < endIndex) {\r\n                nextWork();\r\n            } else {\r\n                startWork();\r\n            }\r\n\r\n            window.setTimeout(function () {\r\n                active = true;\r\n            }, 300);\r\n        }\r\n        \r\n\r\n        updatePaginatorNumbers(index + 1);\r\n    });\r\n\r\n    function leftWork(pos) {\r\n        group.css({ 'left': pos });\r\n        \r\n    }\r\n\r\n    function previousWork() {\r\n        index--;\r\n        group.css({ 'left': `+=${group.width()}` });\r\n    }\r\n\r\n    function nextWork() {\r\n       \r\n        index++;\r\n        group.css({ 'left': `-=${group.width()}` });  \r\n \r\n    }\r\n\r\n    function startWork() {\r\n        index = 0;\r\n        group.css({ 'left': '0px' });\r\n    }\r\n\r\n    function endWork() {\r\n        index = endIndex;\r\n        group.css({ 'left': `-${group.width() * (groupLength - 1)}px` });\r\n        \r\n    }\r\n\r\n    function updatePaginatorNumbers(i) {\r\n        const num = $(`.work-paginator ul li:nth-child(${i})`);\r\n\r\n        $('.work-paginator ul li').removeClass('selected');\r\n\r\n        num.addClass('selected');\r\n    }\r\n\r\n});\r\n\r\n\n\n\r\n\r\n$(document).ready(function() {\r\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\r\n        anchor.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            document.querySelector(this.getAttribute('href')).scrollIntoView({\r\n                behavior: 'smooth'\r\n            });\r\n        });\r\n    });\r\n    \r\n});"]}